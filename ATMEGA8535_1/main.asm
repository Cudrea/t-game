;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   April 27 2024
; Processor: ATmega8535
; Compiler:  AVRASM (Proteus)
;====================================================================

; Copyright (C) 2024 Igor Cudreavtev <cudr373@gmail.com>
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.

;====================================================================
; DEFINITIONS
;====================================================================

		.equ	FlagDisable	= 0
		.equ	FlagNextPiece	= 1
		.equ	FlagButtons	= 2
		.equ	FlagSetRandom	= 3
		.equ	FlagCheckOnly	= 4
		.equ	FlagDrop	= 5
		.equ	FlagGameOver	= 6
		
		.equ	PinLeft		= 4
		.equ	PinRight	= 5
		.equ	PinRotate	= 6
		.equ	PinDrop		= 7
		.equ	PinFilter	= 0xf0
		.equ	KeyLeft		= 0x31
		.equ	KeyRight	= 0x33
		.equ	KeyRotate	= 0x35
		.equ	KeyDrop		= 0x32
		
		.equ	OutDelay	= 4
		
		.def	rOutMsec= r2
		.def	rOutBits= r3
		.def	rColumn	= r4
		.def	rInCnt	= r5
		.def	rPiePos	= r6
		.def	rPieOff = r7
		.def	rDelay	= r8
		.def	rBlinks	= r9
		.def	rRandom = r10
		.def	rMask7	= r11
		.def	rButtons= r12
		.def	rPieOld = r13
		.def	rPieCnt	= r14
		.def	rTickMs	= r15
		.def	tmp	= r16
		.def	par	= r23
		.def	rStage	= r24
		.def	rFlags	= r25
		

		.macro	Load
		ldi   tmp,@1
		mov   @0,tmp
		.endmacro
		
		.macro	Addr
		ldi   @0L,LOW(@1)
		ldi   @0H,HIGH(@1)
		.endmacro
		
		.macro	Get
		Addr  X,@1
		ld    @0,X
		.endmacro

		.macro	Put
		Addr  X,@0
		st    X,@1
		.endmacro
		
		.macro	Copy
		Addr  X,@0
		Addr  Y,@1
		ldi   r17,@2
_next_copy:
		ld    r18,Y+
		st    X+,r18
		dec   r17
		brne  _next_copy
		.endmacro
		
		.macro	CopyPM
		Addr  X,@0
		Addr  Z,2*@1
		ldi   r17,@2
_next_copy_pm:
		lpm   tmp,Z+
		st    X+,tmp
		dec   r17
		brne  _next_copy_pm
		.endmacro
		
		.macro	Zero
		Addr  X,@0
		ldi   r17,@1
		clr   tmp
_next_zero:
		st    X+,tmp
		dec   r17
		brne  _next_zero
		.endmacro

		.macro	ShowColumn
		Addr  X,@2
		Addr  Y,@1
		Addr  Z,@2
		rcall Show
		out   @0,tmp
		.endmacro
		
		.macro	CheckOverlaps
		Addr  Y,@0
		Addr  Z,@1
		add   YL,rPiePos
		rcall Overlaps
		.endmacro
		
		.macro	AttachPiece
		Addr  Y,@0
		Addr  Z,@1
		rcall Attach
		.endmacro
		
		.macro	SendCtrlCode
		ldi   tmp,254
		rcall USART_Transmit
		ldi   tmp,@0
		rcall USART_Transmit
		.endmacro
		
		.macro	TransmitUSART
_trans:	
		sbis  UCSRA,UDRE
		rjmp  _trans
		out   UDR,@0
		.endmacro
		
		.macro	MemSet
		Addr  X,@0
		ldi   tmp,@1
		ldi   r17,@2
_mem:
		st    X+,tmp
		dec   r17
		brne  _mem
		.endmacro
		
		.macro	SumPack
		Addr  X,@0
		rcall SumPack8
		.endmacro

		.macro	DisplayString
		Addr  Z,2*@0
		rcall DisplayStringProc
		.endmacro

;====================================================================
; VARIABLES
;====================================================================

		.dseg
		.org	SRAM_START
pieces:		.BYTE	112
pieceLeaps:	.BYTE	8
reward:		.BYTE	40

		.org	0x0100
formatStr:	.BYTE	28
fieldAbove:	.BYTE	8
maskAbove:	.BYTE	1
fieldBelow:	.BYTE	8
maskBelow:	.BYTE	1
pieColAbove:	.BYTE	1
pieceAbove:	.BYTE	5
pieColBelow:	.BYTE	1
pieceBelow:	.BYTE	5
tmpColAbove:	.BYTE	1
tmpAbove:	.BYTE	5
tmpColBelow:	.BYTE	1
tmpBelow:	.BYTE	5
pieceBuff:	.BYTE	5
oldButtons:	.BYTE	1
gameDelay:	.BYTE	1
linesCount:	.BYTE	1
pieceCount:	.BYTE	1
dropStage:	.BYTE	1
score:		.BYTE	3
randStat:	.BYTE	8

;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================

		.cseg
		.org	0x00
		; Reset Vector
		rjmp  RESET
		reti	;01
		reti	;02
		reti	;03
		reti	;04
		reti	;05
		reti	;06
		reti	;07
		reti	;08
		rjmp  TIMER0_OVF
		reti	;0A
		rjmp  USART_Receive
		reti	;0C
		reti	;0D
		reti	;0E
		reti	;0F
		reti	;10
		reti	;11
		reti	;12
		rjmp  TIMER0_COMP
		reti	;14

;====================================================================
; PROGRAM MEMORY DATA
;====================================================================

pmPieces:
		.db	$2,$3,$1,$0, $3,$6,$0,$0, $2,$3,$1,$0, $3,$6,$0,$0	; Z
		.db	$1,$1,$1,$1, $f,$0,$0,$0, $1,$1,$1,$1, $f,$0,$0,$0	; I
		.db	$1,$3,$2,$0, $6,$3,$0,$0, $1,$3,$2,$0, $6,$3,$0,$0	; S
		.db	$2,$3,$2,$0, $2,$7,$0,$0, $1,$3,$1,$0, $7,$2,$0,$0	; T
		.db	$3,$3,$0,$0, $3,$3,$0,$0, $3,$3,$0,$0, $3,$3,$0,$0	; O
		.db	$2,$2,$3,$0, $1,$7,$0,$0, $3,$1,$1,$0, $7,$4,$0,$0	; J
		.db	$3,$2,$2,$0, $4,$7,$0,$0, $1,$1,$3,$0, $7,$1,$0,$0	; L
pmPieceLeaps:
		.db	1,3,1,1,0,1,1,0
pmReward:
		.db 	$05,$05,$05,$05,$05,$06,$07,$08,$09,$10,\
			$15,$15,$16,$16,$17,$19,$21,$24,$27,$30,\
			$45,$46,$47,$49,$52,$57,$64,$74,$86,$99,\
			$02,$02,$02,$02,$03,$05,$08,$12,$17,$30
pmFormatStr:
		.db	$fe,$01,$fe,$80,'L','e','v','e','l',':','0',\
			$fe,$88,'S','c','o','r','e',':','0','0','0','0','0','0',\
			$fe,$c0,'L','i','n','e','s',':','0',' ',' ',\
			$fe,$cb,'N','e','x','t',':',' ',' ',' ',' ',0
pmStartStr:
		.db	$fe,$01,$fe,$82,'P','r','e','s','s',' ','D','r','o','p',' ','B','u','t','t','o','n',\
			$fe,$c2,'T','o',' ','S','t','a','r','t',' ','T','h','e',' ','G','a','m','e',0,0
pmPieceBitmap:
		.db	$fe,$48,0,0,0,0,$ff,$ff,$ff,0
		.db	$fe,$50,$ff,$ff,$ff,0,0,0,0,0
		.db	$fe,$58,$ff,$ff,$ff,0,$ff,$ff,$ff,0
pmLogo:
		.db	$1c,$00,$18,$00,$18,$08,$1f,$f8,$1f,$f8,$18,$08,$18,$00,$1c,$00

;====================================================================
; CODE SEGMENT
;====================================================================

RESET:
		ldi   tmp,LOW(RAMEND)	; stack init
		out   SPL,tmp		;
		ldi   tmp,HIGH(RAMEND)	;
		out   SPH,tmp		;
		
		clr   rColumn
		clr   rFlags
		clr   rPieCnt
		clr   rStage
		Load  rMask7,7
		Load  rTickMs,100
		Load  rOutMsec,OutDelay
		clr   rInCnt
		clr   rButtons
		Put   oldButtons,rButtons
		
		rcall ViewStat
		
		CopyPM pieces,pmPieces,112+8+40	;160 MAX!!!
		Zero fieldAbove,64
		Load  rDelay,10
		Put   gameDelay,rDelay
		ldi   tmp,0xff
		Put   maskAbove,tmp
		Put   maskBelow,tmp
		sbr   rFlags,(1<<FlagSetRandom)

		MemSet score,0x66,3

		ser   tmp
		out   DDRA,tmp	;Port A output mode
		out   DDRB,tmp	;Port B output mode
		out   DDRC,tmp	;Port C output mode
		
		ldi   tmp,0xf0
		out   PORTD,tmp

		ldi   tmp,0x0b
		out   TCCR0,tmp	;Timer 0: set mode 2, prescaler /64
		ldi   tmp,125
		out   TCNT0,tmp	;Timer 0: set counter value
		out   OCR0,tmp	;Timer 0: set counter value
		ldi   tmp,0x02
		out   TIMSK,tmp	;Timer 0: enable compare match interrupt
		
		ldi   par,0xf9
		
		;rcall PrintPieceBitmap
		;rcall PrintFormatString
		
		
		sei
LOOP:
		;inc   rTickMs
		rjmp  LOOP
		
;====================================================================
TIMER0_COMP:
		dec   par
		breq  _set_disp
		mov   tmp,par
		andi  tmp,7
		brne  _tc_1
		Load  rOutBits,0xfe
		Addr Z,2*pmLogo
_tc_1:
		out   PORTB,rOutBits
		sec
		rol   rOutBits
		lpm   tmp,Z+
		out   PORTC,tmp
		lpm   tmp,Z+
		out   PORTA,tmp
		rjmp  _exit_t0comp
_set_disp:
		out   PORTB,rOutBits
		ldi   tmp,0
		out   UBRRH,tmp
		ldi   tmp,25
		out   UBRRL,tmp
		; Enable Receiver and Transmitter
		ldi   tmp,(1<<TXEN)|(1<<RXEN)|(1<<RXCIE)
		out   UCSRB,tmp
		; Set frame format: 8data, no parity, 1stop bit
		ldi   tmp,(1<<URSEL)|(3<<UCSZ0)
		out   UCSRC,tmp
		;SendCtrlCode 0x1	;Clear display
		DisplayString pmStartStr
		
		ldi   tmp,0x0a
		out   TCCR0,tmp	;Timer 0: set mode 2, prescaler /8
		ldi   tmp,0x01
		out   TIMSK,tmp	;Timer 0: enable coverflow interrupt
_exit_t0comp:
	        reti

;====================================================================
TIMER0_OVF:
		dec   rTickMs
		brne  _show
		Load  rTickMs,100
_collapse:
		tst   rBlinks
		breq  _game_delay
		dec   rBlinks
		brne  _show
		clr   par
		Addr  Y,fieldAbove
		Addr  X,fieldAbove
		rcall Collapse
		Addr  Y,fieldBelow
		Addr  X,fieldAbove
		rcall Collapse
		rcall DisplayLinesCount
		rcall DisplayScore
		rjmp  _show
_game_delay:
		sbrc  rFlags,FlagGameOver
		rjmp  _clear_counter
		sbrc  rFlags,FlagDrop
		rjmp  _stage_down
		dec   rDelay
		brne  _show
		Get   rDelay,gameDelay
_stage_down:
		mov   par,rStage
		dec   rStage
		Copy tmpColAbove,pieColAbove,12
		rcall StageDown
_show:
		dec   rOutMsec
		brne  _check_buttons
		Load  rOutMsec,OutDelay
		tst   rColumn
		brne  _rol_out_bits
		sbrc   rFlags,FlagButtons
		rcall  ButtonsControl
		sbrc   rFlags,FlagNextPiece
		rcall  SelectNextPiece
		Load  rOutBits,0xfe
		rjmp  _show_column
_rol_out_bits:
		sec
		rol   rOutBits
_show_column:
		out   PORTB,rOutBits
		ShowColumn PORTC,fieldAbove,pieColAbove
		ShowColumn PORTA,fieldBelow,pieColBelow
		inc   rColumn
		and   rColumn,rMask7
_check_buttons:
		sbrc  rFlags,FlagButtons
		rjmp  _clear_counter
		sbrc  rFlags,FlagNextPiece
		rjmp  _clear_counter
		in    tmp,PIND
		com   tmp
		andi  tmp,PinFilter
		cp    tmp,rButtons
		breq  _same_value
		mov   rButtons,tmp
		sbrc  rFlags,FlagSetRandom
		rcall SetRandom
_clear_counter:
		clr   rInCnt
		rjmp  _exit_t0ovf
_same_value:
		inc   rInCnt
		sbrs  rInCnt,3
		rjmp  _exit_t0ovf
		Get   tmp,oldButtons
		cp    rButtons,tmp
		breq  _clear_counter
		Put   oldButtons,rButtons
		tst   rButtons
		brne  _flag_buttons
		sbrc  rFlags,FlagDrop
		rcall DropProc
		rjmp  _clear_counter
_flag_buttons:
		sbr   rFlags,(1<<FlagButtons)
		;mov   rRandom,rTickMs
_exit_t0ovf:
		reti

;====================================================================
DropProc:
		cbr   rFlags,(1<<FlagDrop)
		Get   tmp,dropStage
		sub   tmp,rStage
		cpi   tmp,3
		brge  _exit_drop
		Copy tmpColAbove,pieColAbove,12
_next_stage:
		mov   par,rStage
		dec   rStage
		rcall StageDown
		tst   par
		breq  _next_stage
_exit_drop:
		ret
		
;====================================================================
SetRandom:
		cbr   rFlags,(1<<FlagSetRandom)
		sbr   rFlags,(1<<FlagNextPiece)
		mov   rRandom,rTickMs
		rcall Random
		Put   oldButtons,rButtons
		rcall SendPieceBitmap
		DisplayString pmFormatStr
		ret
		
;====================================================================
Show:
		ldd   r17,Y+8
		add   YL,rColumn
		ld    tmp,Y
		cpi   r17,0xff
		breq  _S_0
		sbrs  rBlinks,0
		and   tmp,r17
_S_0:
		cpi   rStage,16
		brge  _S_9
		ld    r19,X
		tst   r19
		breq  _S_4
_S_1:
		add   ZL,r19
		ld    r18,Z
		tst   r18
		brne  _S_3
		;cp    rStage,rMask7
		;brne  _S_2
		cpi   r19,3
		brlo  _S_3
_S_2:
		clr   r19
		st    X,r19
		rjmp  _S_9
_S_3:
		or    tmp,r18
		inc   r19
		st    X,r19
		rjmp  _S_9
_S_4:
		cp    rPiePos,rColumn
		brne  _S_9
		ldi   r19,1
		rjmp  _S_1
_S_9:
		ret

;====================================================================
Collapse:
		ldd   r17,Y+8
		cpi   r17,0xff
		breq  _C_9
		clr   rColumn
		clr   r18
_C_0:
		ld    r21,Y
		clr   r22
		ldi   r19,1
		clr   tmp
		cp    XL,YL
		breq  _C_1
		ld    tmp,X
_C_1:
		mov   r20,r17
		and   r20,r19
		cp    r20,r19
		brne  _C_2
		ror   r21
		ror   r22
		rjmp  _C_3
_C_2:
		lsr   r21
		inc   r18
_C_3:
		lsl   r19
		tst   r19
		brne  _C_1
		tst   rColumn
		brne  _C_4
		add   par,r18
_C_4:
		tst   r18
		breq  _C_5
		dec   r18
		clc
		ror   tmp
		ror   r22
		rjmp  _C_4
_C_5:
		cp    XL,YL
		brne  _C_6
		inc   XL
		rjmp  _C_7
_C_6:
		st    X+,tmp
_C_7:
		st    Y+,r22
		inc   rColumn
		sbrs  rColumn,3
		rjmp  _C_0
		ser   r17
		st    Y,r17
_C_9:
		clr   rColumn
		ret
		
;====================================================================
ButtonsControl:
		sbrc  rFlags,FlagDisable
		ret
		sbrc  rButtons,PinLeft
		rjmp  _Left
		sbrc  rButtons,PinRight
		rjmp  _Right
		sbrc  rButtons,PinRotate
		rjmp  _Rotate
		sbrc  rButtons,PinDrop
		rjmp  _Drop
		rjmp  _exit_ctrl
_Rotate:
		Zero tmpColAbove,12
		push  rPieOff
		push  rPiePos
		mov   par,rPieOff
		ldi   r17,4
		add   par,r17
		ldi   r17,0xf
		and   par,r17
		swap  r17
		and   rPieOff,r17
		or    rPieOff,par
		mov   tmp,rPiePos
		cpi   tmp,3
		brlo  _skip_change
		rcall ChangePiecePos
_skip_change:
		rcall BufferPiece
		ldi   par,16
		sbr   rFlags,(1<<FlagCheckOnly)
		rcall StageDown
		cbr   rFlags,(1<<FlagCheckOnly)
		tst   par
		brne  _rest_pos
		pop   tmp
		pop   tmp
		rjmp  _exit_ctrl
_rest_pos:
		pop   rPiePos
		pop   rPieOff
		rjmp  _exit_ctrl
_Drop:
		sbrc  rFlags,FlagSetRandom
		rjmp  _exit_ctrl
		sbr   rFlags,(1<<FlagDrop)
		Put   dropStage,rStage
		rjmp  _exit_ctrl
_Left:
		tst   rPiePos
		breq  _exit_ctrl
		mov   r20,rPiePos
		dec   rPiePos
		rjmp  _check_over
_Right:
		mov   r20,rPiePos
		inc   rPiePos
_check_over:
		CheckOverlaps fieldAbove,pieceAbove
		sbrc  par,0
		rjmp  _restore_pos
		CheckOverlaps fieldBelow,pieceBelow
		sbrc  par,0
_restore_pos:
		mov   rPiePos,r20
_exit_ctrl:
		cbr   rFlags,(1<<FlagButtons)
		ret
		
;====================================================================
Overlaps:
		ldi   tmp,4
_next_ov:
		ld    r18,Y+
		ld    r19,Z+
		and   r18,r19
		brne  _overlapped
		dec   tmp
		brne  _next_ov
		clr   par
		ret
_overlapped:
		ser   par
		ret

Attach:
		ser   tmp
		clr   r20
		mov   r21,rPiePos
		ldi   r19,4
_A_1:
		ld    r17,Y
		cp    r20,r21
		brne  _A_2
		ld    r18,Z
		or    r17,r18
		clr   r18
		st    Z+,r18
		inc   r21
		dec   r19
		brne  _A_2
		clr   r21
_A_2:
		and   tmp,r17
		st    Y+,r17
		inc   r20
		sbrs  r20,3
		rjmp  _A_1
		tst   tmp
		breq  _A_3
		com   tmp
		st    Y,tmp
		mov  rBlinks,rMask7
_A_3:
		ret

;====================================================================
StageDown:
		cpi   par,12
		brlo  _down_ab
		ldi   tmp,16
		sub   tmp,rStage
		cpi   tmp,9
		brlo  _G_1
		ldi   tmp,8
_G_1:
		Addr Y,pieceBuff
		Addr Z,tmpColAbove
		clr   r20
		st    Z+,r20
_next_col_na:
		mov   r19,tmp
		ld    r17,Y+
		clr   r18
_shift_col_na:
		lsr   r17
		ror   r18
		dec   r19
		brne  _shift_col_na
		st    Z+,r18
		inc   r20
		sbrs  r20,2
		rjmp  _next_col_na
		ldi   par,8
		cp    rStage,par
		brge  _check_above
_down_ab:
		sub   par,rStage
		Addr Y,tmpAbove
		Addr Z,tmpBelow
_next_col_ab:
		ld    r17,Y
		ld    r18,Z
		mov   r19,par
		tst   r17
		brne  _shift_col_ab
		tst   r18
		breq  _check_below
_shift_col_ab:
		lsr   r17
		ror   r18
		brcs  _attach_piece
		dec   r19
		brne  _shift_col_ab
		st    Y+,r17
		st    Z+,r18
		rjmp  _next_col_ab
_check_below:
		CheckOverlaps fieldBelow,tmpBelow
		sbrc  par,0
		rjmp  _attach_piece
_check_above:
		CheckOverlaps fieldAbove,tmpAbove
		sbrc  par,0
		rjmp  _attach_piece
		Copy pieColAbove,tmpColAbove,12
		tst   rStage
		breq  _attach_piece
		cbr   rFlags,(1<<FlagDisable)
		ret
_attach_piece:
		sbrc  rFlags,FlagCheckOnly
		ret
		sbr   rFlags,(1<<FlagDisable)
		cbr   rFlags,(1<<FlagDrop)
		AttachPiece fieldAbove,pieceAbove
		AttachPiece fieldBelow,pieceBelow
		ser   par
		cpi   rStage,14
		brge  _game_over
		sbr   rFlags,(1<<FlagNextPiece)
		ret
_game_over:
		sbr   rFlags,(1<<FlagGameOver)
		ret

;====================================================================
SelectNextPiece:
		cbr   rFlags,(1<<FlagNextPiece)
		rcall Random
		mov   rPieOff,par
		swap  rPieOff
		rcall BufferPiece
		Load  rPiePos,2
		cpi   par,4
		brne  _skip_ne
		inc   rPiePos
_skip_ne:
		inc   rPieCnt
		sbrc  rPieCnt,5
		rcall NextLevel
		ldi   rStage,15
		ret
		
;====================================================================
BufferPiece:
		Addr  Y,pieces
		add   YL,rPieOff
		Addr  X,pieceBuff
		ldi   r17,4
_next_bu:
		ld    tmp,Y+
		st    X+,tmp
		dec   r17
		brne  _next_bu
		ret
		
;====================================================================
ChangePiecePos:
		mov   tmp,rPieOff
		swap  tmp
		andi  tmp,0xf
		Addr  X,PieceLeaps
		add   XL,tmp
		ld    tmp,X
		sbrs  par,2
		rjmp  _sub_pos
		add   rPiePos,tmp
		ret
_sub_pos:
		sub   rPiePos,tmp
		ret

;====================================================================
Random:
		ldi   tmp,3
		mov   r17,rTickMs
_repeat:
		mul   rRandom,tmp
		mov   rRandom,r0
		lsr   r17
		inc   r17
		ror   r17
		add   rRandom,r17
		inc   rRandom
		mov   par,rRandom
		and   par,rMask7
		cp    par,rMask7
		breq  _repeat
		dec   tmp
		breq  _exit_rnd
		cp    par,rPieOld
		breq  _repeat
_exit_rnd:
		rcall DisplayNextPiece
		rcall ToStat
		ret
 
;====================================================================
ToStat:
		Addr X,randStat
		add   XL,par
		ld    tmp,X
		inc   tmp
		st    X,tmp
		ret
		
;====================================================================
ViewStat:
		Addr X,randStat
		ldi   r17,7
_next_stat:
		ld    tmp,X+
		dec   r17
		brne  _next_stat
		ret
		
;====================================================================
NextLevel:
		SendCtrlCode 0x86
		clr   rPieCnt
		Get   r17,gameDelay
		cpi   r17,1
		breq  _exit_nl
		dec   r17
		Put   gameDelay,r17
		ldi   tmp,58
		sub   tmp,r17
		rcall USART_Transmit
_exit_nl:
		ret
 
;====================================================================
USART_Transmit:
		; Wait for empty transmit buffer
		sbis  UCSRA,UDRE
		rjmp  USART_Transmit
		; Put data (r16) into buffer, sends the data
		out   UDR,tmp
		ret
 
;====================================================================
USART_Receive:
		in    tmp,UDR
		sbrc  rFlags,FlagButtons
		reti
		clr   r17
		cpi   tmp,KeyLeft
		breq  _key_left
		cpi   tmp,KeyRight
		breq  _key_right
		cpi   tmp,KeyRotate
		breq  _key_rotate
		cpi   tmp,KeyDrop
		breq  _key_drop
		reti
_key_left:
		sbr   r17,(1<<PinLeft)
		rjmp  _set_flag
_key_right:
		sbr   r17,(1<<PinRight)
		rjmp  _set_flag
_key_rotate:
		sbr   r17,(1<<PinRotate)
		rjmp  _set_flag
_key_drop:
		sbr   r17,(1<<PinDrop)
_set_flag:
		mov   rButtons,r17
		sbr   rFlags,(1<<FlagButtons)
		reti
		
		; Wait for data to be received
_wait_RXC:
		sbis  UCSRA,RXC
		rjmp  _wait_RXC
		; Get and return received data from buffer
		in    tmp,UDR
		sbi   UCSRB,RXCIE
		ret
 
;====================================================================
DisplayStringProc:
		lpm   tmp,Z+
		tst   tmp
		breq  _exit_dsp
		rcall USART_Transmit
		rjmp  DisplayStringProc
_exit_dsp:
		ret
		
;====================================================================
DisplayScore:
		SendCtrlCode 0x8e
		Get   tmp,gameDelay
		ldi   r17,10
		sbrc  par,2
		rjmp  _level_4
		mul   par,r17
		sub   r0,tmp
		Addr  Z,reward
		add   ZL,r0
		ld    par,Z
		SumPack score+3
		rjmp  _disp_score_0
_level_4:
		sub   r17,tmp
		Addr  Z,reward+30
		add   ZL,r17
		ld    par,Z
		SumPack score+2
_disp_score_0:
		Addr  X,score
		ldi   r17,3
_disp_score:
		ld    tmp,X
		swap  tmp
		andi  tmp,0xf
		subi  tmp,-0x2a
		rcall USART_Transmit
		ld    tmp,X+
		andi  tmp,0xf
		subi  tmp,-0x2a
		rcall USART_Transmit
		dec   r17
		brne  _disp_score
		ret

;====================================================================
DisplayLinesCount:
		SendCtrlCode 0xc6
		Get   tmp,linesCount
		add   tmp,par
		Put   linesCount,tmp
		rcall Bin2bcd8
		push  tmp
		ldi   tmp,0x30
		tst   r18
		breq  _skip_zero_1
		add   tmp,r18
		rcall USART_Transmit
		ldi   tmp,0x30
		rjmp  _zero_en
_skip_zero_1:
		tst   r17
		breq  _skip_zero_2
_zero_en:
		add   tmp,r17
		rcall USART_Transmit
		ldi   tmp,0x30
_skip_zero_2:
		pop   r17
		add   tmp,r17
		rcall USART_Transmit
		ret

;====================================================================
DisplayNextPiece:
		push  par
		SendCtrlCode 0xd0
		Addr  X,pieces
		swap  par
		add   XL,par
		ldi   r17,4
_next_dnp:
		ld    tmp,X+
		rcall USART_Transmit
		dec   r17
		brne  _next_dnp
		mov   par,rPieOld
		pop   rPieOld
		ret
 
;====================================================================
SendPieceBitmap:
		Addr  Z,2*pmPieceBitmap
		ldi   r18,30
_next_bitmap:
		lpm   tmp,Z+
		rcall USART_Transmit
		dec   r18
		brne  _next_bitmap
		ret
		
Bin2bcd8:
		clr   r17
		clr   r18
_loop_bcd8:
		subi  tmp,10
		brcs  _exit_bcd8
		inc   r17
		cpi   r17,10
		brne  _loop_bcd8
		inc   r18
		clr   r17
		rjmp  _loop_bcd8
_exit_bcd8:
		subi  tmp,-10
		ret
		
;====================================================================
SumPack8:
		ld    tmp,-X
		add   tmp,par
		in    r0,SREG
		sbrc  r0,5
		subi  tmp,-6
		sbrs  r0,0
		rjmp  _store_sum
		subi  tmp,-0x60
		st    X,tmp
		ldi   par,1
		rjmp  SumPack8
_store_sum:
		st    X,tmp
		ret

;====================================================================
